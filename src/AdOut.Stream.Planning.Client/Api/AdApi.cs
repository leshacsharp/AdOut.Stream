/* 
 * AdOut.Planning API
 *
 * Access to Apps API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using AdOut.Stream.Planning.Client.Client;
using AdOut.Stream.Planning.Client.Model;

namespace AdOut.Stream.Planning.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAdApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void CreateAd (CreateAdModel body);

        /// <summary>
        /// Create an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateAdWithHttpInfo (CreateAdModel body);
        /// <summary>
        /// Delete an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteAd (string id);

        /// <summary>
        /// Delete an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAdWithHttpInfo (string id);
        /// <summary>
        /// Get a advertisement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AdDto</returns>
        AdDto GetAd (string id);

        /// <summary>
        /// Get a advertisement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AdDto</returns>
        ApiResponse<AdDto> GetAdWithHttpInfo (string id);
        /// <summary>
        /// Get all advertisements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>List&lt;AdListDto&gt;</returns>
        List<AdListDto> GetAds (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Get all advertisements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AdListDto&gt;</returns>
        ApiResponse<List<AdListDto>> GetAdsWithHttpInfo (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Update an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void UpdateAd (UpdateAdModel body);

        /// <summary>
        /// Update an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAdWithHttpInfo (UpdateAdModel body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAdAsync (CreateAdModel body);

        /// <summary>
        /// Create an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAdAsyncWithHttpInfo (CreateAdModel body);
        /// <summary>
        /// Delete an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAdAsync (string id);

        /// <summary>
        /// Delete an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a advertisement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AdDto</returns>
        System.Threading.Tasks.Task<AdDto> GetAdAsync (string id);

        /// <summary>
        /// Get a advertisement by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AdDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdDto>> GetAdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get all advertisements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Task of List&lt;AdListDto&gt;</returns>
        System.Threading.Tasks.Task<List<AdListDto>> GetAdsAsync (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Get all advertisements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AdListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdListDto>>> GetAdsAsyncWithHttpInfo (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Update an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAdAsync (UpdateAdModel body);

        /// <summary>
        /// Update an advertisement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAdAsyncWithHttpInfo (UpdateAdModel body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AdApi : IAdApi
    {
        private AdOut.Stream.Planning.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdApi(String basePath)
        {
            this.Configuration = new AdOut.Stream.Planning.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AdOut.Stream.Planning.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdApi"/> class
        /// </summary>
        /// <returns></returns>
        public AdApi()
        {
            this.Configuration = AdOut.Stream.Planning.Client.Client.Configuration.Default;

            ExceptionFactory = AdOut.Stream.Planning.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdApi(AdOut.Stream.Planning.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AdOut.Stream.Planning.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AdOut.Stream.Planning.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AdOut.Stream.Planning.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AdOut.Stream.Planning.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void CreateAd (CreateAdModel body)
        {
             CreateAdWithHttpInfo(body);
        }

        /// <summary>
        /// Create an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAdWithHttpInfo (CreateAdModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdApi->CreateAd");

            var localVarPath = "./ad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAdAsync (CreateAdModel body)
        {
             await CreateAdAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAdAsyncWithHttpInfo (CreateAdModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdApi->CreateAd");

            var localVarPath = "./ad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteAd (string id)
        {
             DeleteAdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdApi->DeleteAd");

            var localVarPath = "./ad/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAdAsync (string id)
        {
             await DeleteAdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdApi->DeleteAd");

            var localVarPath = "./ad/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a advertisement by id. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AdDto</returns>
        public AdDto GetAd (string id)
        {
             ApiResponse<AdDto> localVarResponse = GetAdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a advertisement by id. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AdDto</returns>
        public ApiResponse< AdDto > GetAdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdApi->GetAd");

            var localVarPath = "./ad/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AdDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdDto)));
        }

        /// <summary>
        /// Get a advertisement by id. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AdDto</returns>
        public async System.Threading.Tasks.Task<AdDto> GetAdAsync (string id)
        {
             ApiResponse<AdDto> localVarResponse = await GetAdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a advertisement by id. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AdDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdDto>> GetAdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AdApi->GetAd");

            var localVarPath = "./ad/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AdDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdDto)));
        }

        /// <summary>
        /// Get all advertisements. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>List&lt;AdListDto&gt;</returns>
        public List<AdListDto> GetAds (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<AdListDto>> localVarResponse = GetAdsWithHttpInfo(title, contentType, status, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all advertisements. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AdListDto&gt;</returns>
        public ApiResponse< List<AdListDto> > GetAdsWithHttpInfo (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./ads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Title", title)); // query parameter
            if (contentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ContentType", contentType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ToDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdListDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AdListDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdListDto>)));
        }

        /// <summary>
        /// Get all advertisements. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Task of List&lt;AdListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdListDto>> GetAdsAsync (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<AdListDto>> localVarResponse = await GetAdsAsyncWithHttpInfo(title, contentType, status, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all advertisements. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate"> (optional)</param>
        /// <param name="toDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AdListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AdListDto>>> GetAdsAsyncWithHttpInfo (string title = null, ContentType? contentType = null, AdStatus? status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./ads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Title", title)); // query parameter
            if (contentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ContentType", contentType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ToDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AdListDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AdListDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AdListDto>)));
        }

        /// <summary>
        /// Update an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void UpdateAd (UpdateAdModel body)
        {
             UpdateAdWithHttpInfo(body);
        }

        /// <summary>
        /// Update an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAdWithHttpInfo (UpdateAdModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdApi->UpdateAd");

            var localVarPath = "./ad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAdAsync (UpdateAdModel body)
        {
             await UpdateAdAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an advertisement. 
        /// </summary>
        /// <exception cref="AdOut.Stream.Planning.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAdAsyncWithHttpInfo (UpdateAdModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdApi->UpdateAd");

            var localVarPath = "./ad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
