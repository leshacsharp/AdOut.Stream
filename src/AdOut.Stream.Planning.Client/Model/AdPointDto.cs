/* 
 * AdOut.Planning API
 *
 * Access to Apps API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdOut.Stream.Planning.Client.Client.SwaggerDateConverter;

namespace AdOut.Stream.Planning.Client.Model
{
    /// <summary>
    /// AdPointDto
    /// </summary>
    [DataContract]
        public partial class AdPointDto :  IEquatable<AdPointDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdPointDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="location">location.</param>
        /// <param name="daysOff">daysOff.</param>
        /// <param name="tariffs">tariffs.</param>
        public AdPointDto(string id = default(string), string location = default(string), List<DayOfWeek> daysOff = default(List<DayOfWeek>), List<TariffDto> tariffs = default(List<TariffDto>))
        {
            this.Id = id;
            this.Location = location;
            this.DaysOff = daysOff;
            this.Tariffs = tariffs;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets DaysOff
        /// </summary>
        [DataMember(Name="daysOff", EmitDefaultValue=false)]
        public List<DayOfWeek> DaysOff { get; set; }

        /// <summary>
        /// Gets or Sets Tariffs
        /// </summary>
        [DataMember(Name="tariffs", EmitDefaultValue=false)]
        public List<TariffDto> Tariffs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdPointDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  DaysOff: ").Append(DaysOff).Append("\n");
            sb.Append("  Tariffs: ").Append(Tariffs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdPointDto);
        }

        /// <summary>
        /// Returns true if AdPointDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AdPointDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdPointDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.DaysOff == input.DaysOff ||
                    this.DaysOff != null &&
                    input.DaysOff != null &&
                    this.DaysOff.SequenceEqual(input.DaysOff)
                ) && 
                (
                    this.Tariffs == input.Tariffs ||
                    this.Tariffs != null &&
                    input.Tariffs != null &&
                    this.Tariffs.SequenceEqual(input.Tariffs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.DaysOff != null)
                    hashCode = hashCode * 59 + this.DaysOff.GetHashCode();
                if (this.Tariffs != null)
                    hashCode = hashCode * 59 + this.Tariffs.GetHashCode();
                return hashCode;
            }
        }
    }
}
