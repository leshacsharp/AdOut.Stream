/* 
 * AdOut.Planning API
 *
 * Access to Apps API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdOut.Stream.Planning.Client.Client.SwaggerDateConverter;

namespace AdOut.Stream.Planning.Client.Model
{
    /// <summary>
    /// SchedulePeriod
    /// </summary>
    [DataContract]
        public partial class SchedulePeriod :  IEquatable<SchedulePeriod>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulePeriod" /> class.
        /// </summary>
        /// <param name="timeRanges">timeRanges.</param>
        /// <param name="dates">dates.</param>
        public SchedulePeriod(List<TimeRange> timeRanges = default(List<TimeRange>), List<DateTime?> dates = default(List<DateTime?>))
        {
            this.TimeRanges = timeRanges;
            this.Dates = dates;
        }
        
        /// <summary>
        /// Gets or Sets TimeRanges
        /// </summary>
        [DataMember(Name="TimeRanges", EmitDefaultValue=false)]
        public List<TimeRange> TimeRanges { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name="Dates", EmitDefaultValue=false)]
        public List<DateTime?> Dates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchedulePeriod {\n");
            sb.Append("  TimeRanges: ").Append(TimeRanges).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchedulePeriod);
        }

        /// <summary>
        /// Returns true if SchedulePeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of SchedulePeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchedulePeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeRanges == input.TimeRanges ||
                    this.TimeRanges != null &&
                    input.TimeRanges != null &&
                    this.TimeRanges.SequenceEqual(input.TimeRanges)
                ) && 
                (
                    this.Dates == input.Dates ||
                    this.Dates != null &&
                    input.Dates != null &&
                    this.Dates.SequenceEqual(input.Dates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeRanges != null)
                    hashCode = hashCode * 59 + this.TimeRanges.GetHashCode();
                if (this.Dates != null)
                    hashCode = hashCode * 59 + this.Dates.GetHashCode();
                return hashCode;
            }
        }
    }
}
