/* 
 * AdOut.Planning API
 *
 * Access to Apps API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdOut.Stream.Planning.Client.Client.SwaggerDateConverter;

namespace AdOut.Stream.Planning.Client.Model
{
    /// <summary>
    /// TariffDto
    /// </summary>
    [DataContract]
        public partial class TariffDto :  IEquatable<TariffDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffDto" /> class.
        /// </summary>
        /// <param name="priceForMinute">priceForMinute.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        public TariffDto(double? priceForMinute = default(double?), string startTime = default(string), string endTime = default(string))
        {
            this.PriceForMinute = priceForMinute;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }
        
        /// <summary>
        /// Gets or Sets PriceForMinute
        /// </summary>
        [DataMember(Name="priceForMinute", EmitDefaultValue=false)]
        public double? PriceForMinute { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TariffDto {\n");
            sb.Append("  PriceForMinute: ").Append(PriceForMinute).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffDto);
        }

        /// <summary>
        /// Returns true if TariffDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceForMinute == input.PriceForMinute ||
                    (this.PriceForMinute != null &&
                    this.PriceForMinute.Equals(input.PriceForMinute))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceForMinute != null)
                    hashCode = hashCode * 59 + this.PriceForMinute.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }
    }
}
