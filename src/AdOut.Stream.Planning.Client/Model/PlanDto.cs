/* 
 * AdOut.Planning API
 *
 * Access to Apps API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdOut.Stream.Planning.Client.Client.SwaggerDateConverter;

namespace AdOut.Stream.Planning.Client.Model
{
    /// <summary>
    /// PlanDto
    /// </summary>
    [DataContract]
        public partial class PlanDto :  IEquatable<PlanDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDto" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="userId">userId.</param>
        /// <param name="status">status.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="schedules">schedules.</param>
        /// <param name="ads">ads.</param>
        /// <param name="adPoints">adPoints.</param>
        public PlanDto(string title = default(string), string userId = default(string), PlanStatus status = default(PlanStatus), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<ScheduleDto> schedules = default(List<ScheduleDto>), List<AdListDto> ads = default(List<AdListDto>), List<AdPointDto> adPoints = default(List<AdPointDto>))
        {
            this.Title = title;
            this.UserId = userId;
            this.Status = status;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.Schedules = schedules;
            this.Ads = ads;
            this.AdPoints = adPoints;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PlanStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Schedules
        /// </summary>
        [DataMember(Name="schedules", EmitDefaultValue=false)]
        public List<ScheduleDto> Schedules { get; set; }

        /// <summary>
        /// Gets or Sets Ads
        /// </summary>
        [DataMember(Name="ads", EmitDefaultValue=false)]
        public List<AdListDto> Ads { get; set; }

        /// <summary>
        /// Gets or Sets AdPoints
        /// </summary>
        [DataMember(Name="adPoints", EmitDefaultValue=false)]
        public List<AdPointDto> AdPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanDto {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Schedules: ").Append(Schedules).Append("\n");
            sb.Append("  Ads: ").Append(Ads).Append("\n");
            sb.Append("  AdPoints: ").Append(AdPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanDto);
        }

        /// <summary>
        /// Returns true if PlanDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.Schedules == input.Schedules ||
                    this.Schedules != null &&
                    input.Schedules != null &&
                    this.Schedules.SequenceEqual(input.Schedules)
                ) && 
                (
                    this.Ads == input.Ads ||
                    this.Ads != null &&
                    input.Ads != null &&
                    this.Ads.SequenceEqual(input.Ads)
                ) && 
                (
                    this.AdPoints == input.AdPoints ||
                    this.AdPoints != null &&
                    input.AdPoints != null &&
                    this.AdPoints.SequenceEqual(input.AdPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.Schedules != null)
                    hashCode = hashCode * 59 + this.Schedules.GetHashCode();
                if (this.Ads != null)
                    hashCode = hashCode * 59 + this.Ads.GetHashCode();
                if (this.AdPoints != null)
                    hashCode = hashCode * 59 + this.AdPoints.GetHashCode();
                return hashCode;
            }
        }
    }
}
